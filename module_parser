#!/usr/bin/python3
# /*********************************************************************************************
# * 
# * VSI CONFIDENTIAL
# * __________________
# * 
# *  [2014] - [2023] Vehicular Solutions Innovated
# *  All Rights Reserved.
# * 
# * NOTICE:  All information contained herein is, and remains
# * the property of VSI and its suppliers, if any.
# * The intellectual and technical concepts contained
# * herein are proprietary to VSI 
# * and its suppliers and may be covered by U.S. and Foreign Patents,
# * patents in process, and are protected by trade secret or copyright law.
# * Dissemination of this information or reproduction of this material
# * is strictly forbidden unless prior written permission is obtained from VSI
# *******************************************************************************/

# /*************************************************
#     -- File name: module_parser
#     -- Title    : module_parser
#     -- Author   : Dino
#     -- Created  : 02/22/2023
#     -- Revision :
# **************************************************/
import os
import sys

name = sys.argv[-1].split(".")[0]


def find_ifdef(list: list, define_list: list, )-> int :
    if '`ifdef' in list :
        return list[list.index('`ifdef') + 1] in define_list
    elif '`ifndef' in list :
        return list[list.index('`ifndef') + 1] not in define_list
    else :
        return False

def find_ifelse(con: list, check: list, body: list, define: list, module: list, file: list) :
    if len(con) == len(check) :
        if con[-1]  == check[-1]:
            if '`ifdef' in body or '`ifndef' in body:
                if find_ifdef(body, define) :
                    con.append('if')
                else : 
                    con.append('else')
                check.append('if')
            elif '`else' in body :
                check.pop()
                check.append('else')
            elif '`endif' in body :
                con.pop()
                check.pop()
            else :
                for index in range(len(body)) :
                    if '//' == body[index]:
                        break
                    if body[index] in file : module.append(body[index])
                    if body[index] == '`define' : define.append(body[index + 1])
        else :
            if '`ifdef' in body or '`ifndef' in body:
                check.append('if')
            elif '`else' in body :
                check.pop()
                check.append('else')
            elif '`endif' in body :
                con.pop()
                check.pop()
            else : 
                return con, check, define, module, file
    else :
        if '`ifdef' in body or '`ifndef' in body:
            check.append('if')
        elif '`else' in body :
            check.pop()
            check.append('else')
        elif '`endif' in body :
            check.pop()
        else : 
            return con, check, define, module, file
    return con, check, define, module, file


def find_module(name: str, file_name: list) -> list :
    
    body = []
    module_name = []

    con_stack= []
    check_stack = []
    define = []
    f = open(name + '.v', "r")

    for line in f :
        body = line.split()
#       define.v에서 선언된 변수들을 리스트화
        if '`include' in body and '"define.v"' in body :
            define_result = []
            f = open("define.v", "r")
            lines = f.readlines()
            for line in lines :
                define_result = line.split()
                if len(define_result) > 1:
                    if define_result[0] == '`define' :
                        if '(' in define_result[1]:
                            a,b = define_result[1].split('(')
                            define.append(a)
                        else : define.append(define_result[1])
            f.close()
#       프로젝트 내에 변수로 선언 된 이름이 폴더내에 다른 프로젝트 이름으로 존재할 경우 제외
        if "wire" in body or "reg" in body or "=" in body or "module" in body:
            continue

        if not con_stack :
            if '`ifdef' in body or '`ifndef' in body:
                if find_ifdef(body, define):
                    con_stack.append('if')
                else : 
                    con_stack.append('else')
                check_stack.append('if')
            else :
                for index in range(len(body)) :
                    if '//' == body[index]:
                        break
                    if body[index] in file_name : module_name.append(body[index])
                    if body[index] == '`define' : define.append(body[index + 1])
                        
        else : 
            if con_stack[-1] == 'if' :
                con_stack, check_stack, define, module_name, file_name = find_ifelse(con_stack, check_stack, body, define, module_name, file_name)
            else :
                con_stack, check_stack, define, module_name, file_name = find_ifelse(con_stack, check_stack, body, define, module_name, file_name)
    f.close()

    return module_name



if __name__ == '__main__' :
#   프로젝트의 이름이 입력받았는지 확인
    if name != 'module_parser':
        module = name
    else :
        print("Not entered project name")
        sys.exit()

#   폴더 내 .v 파일 리스트화
    file_list = os.listdir("./")
    file_name = []
    for file in file_list :
        if file[-2:] == ".v" : file_name.append(file[:-2])
#   입력받은 프로젝트 이름이 폴더 내에 있는지 확인
    module_name = []
    if module not in file_name :
        print('"{0}.v" is not exist'.format(module))
        sys.exit()
    else :
        module_name.append(module)

#   입력받은 프로젝트에 선언되어 있는 모든 하위 모듈 호출
    i = 0

    while i < len(module_name) :
        for check in find_module(module_name[i], file_name):
            if check not in module_name : module_name.append(check)
        i += 1

    for index in range(len(module_name)) :
        print('{0}.v'.format(module_name[index]))
